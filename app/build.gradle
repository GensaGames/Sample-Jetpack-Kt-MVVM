apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: "androidx.navigation.safeargs.kotlin"


android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "sample.settings.gensagames.samplejetpackmvvm"
        minSdkVersion 26
        targetSdkVersion 28

        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        testApplicationId "sample.settings.gensagames.samplejetpackmvvm.tests"
        // If set to 'true', enables the instrumentation class to start and stop profiling.
        // If set to false (default), profiling occurs the entire time the instrumentation
        // class is running.
        testHandleProfiling true
        // If set to 'true', indicates that the Android system should run the instrumentation
        // class as a functional test. The default value is 'false'
        testFunctionalTest true

        multiDexEnabled true
    }
    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }

    testOptions {
        // Changes the directory where Gradle saves test reports. By default, Gradle saves test reports
        // in the path_to_your_project/module_name/build/outputs/reports/ directory.
        // '$rootDir' sets the path relative to the root directory of the current project.
        reportDir "$rootDir/test-reports"
        // Changes the directory where Gradle saves test results. By default, Gradle saves test results
        // in the path_to_your_project/module_name/build/outputs/test-results/ directory.
        // '$rootDir' sets the path relative to the root directory of the current project.
        resultsDir "$rootDir/test-results"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.multidex:multidex:$multidex_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.50'
    implementation 'androidx.appcompat:appcompat:1.1.0'

    implementation 'androidx.core:core-ktx:1.2.0-alpha04'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0-alpha10'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'
    implementation 'com.thedeanda:lorem:2.1'

    /**
     * Image library
     */
    implementation 'com.facebook.fresco:fresco:2.0.0'

    /**
     * Litho
     */
    implementation "com.facebook.litho:litho-core:$litho"
    implementation "com.facebook.litho:litho-widget:$litho"
    implementation "com.facebook.litho:litho-fresco:$litho"
    kapt "com.facebook.litho:litho-processor:$litho"
    implementation 'com.facebook.soloader:soloader:0.8.0'

    /**
     * Litho Sections
     */
    implementation 'com.facebook.litho:litho-sections-core:0.29.0'
    implementation 'com.facebook.litho:litho-sections-widget:0.29.0'
    compileOnly 'com.facebook.litho:litho-sections-annotations:0.29.0'
    kapt 'com.facebook.litho:litho-sections-processor:0.29.0'

    compileOnly "com.facebook.litho:litho-sections-annotations:$litho"
    kapt "com.facebook.litho:litho-sections-processor:$litho"

    /**
     * Litho Testing
     */
    implementation "com.facebook.litho:litho-fresco:$litho"
    testImplementation "com.facebook.litho:litho-testing:$litho"

    /**
     * Dagger
     */

    implementation "com.google.dagger:dagger:$dagger2_version"
    kapt "com.google.dagger:dagger-compiler:$dagger2_version"

    implementation "com.google.dagger:dagger-android:$dagger2_version"
    implementation "com.google.dagger:dagger-android-support:$dagger2_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger2_version"


    /**
     * Navigation
     */
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version_ktx"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version_ktx"

    /**
     * Tests Assertions
     */
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.ext:truth:1.2.0'
    androidTestImplementation 'com.google.truth:truth:1.0'

    /**
     * Testing
     */

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espresso"
    androidTestImplementation 'org.mockito:mockito-android:2.28.2'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.mockito:mockito-android:2.28.2'

    /**
     * Tests Dagger
     */

    androidTestImplementation "com.google.dagger:dagger:$dagger2_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger2_version"
    testImplementation "com.google.dagger:dagger:$dagger2_version"
    kaptTest "com.google.dagger:dagger-compiler:$dagger2_version"

    androidTestImplementation "com.google.dagger:dagger-android:$dagger2_version"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:$dagger2_version"
    testImplementation "com.google.dagger:dagger-android:$dagger2_version"
    kaptTest "com.google.dagger:dagger-android-processor:$dagger2_version"
    /**
     * Other
     */
    implementation 'com.github.bumptech.glide:glide:4.10.0'
    implementation 'com.jakewharton.timber:timber:4.7.1'
}
